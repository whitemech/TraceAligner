/*
 *
 *  Copyright 2021-2023 WhiteMech
 *
 *  ------------------------------
 *
 *  This file is part of Trace-Alignment.
 *
 *  Use of this source code is governed by an MIT-style
 *  license that can be found in the LICENSE file or at
 *  https://opensource.org/licenses/MIT.
 *
 */

plugins {
    id 'application'

    // Static Analysis
    // id 'checkstyle'
    // id 'pmd'
}

apply plugin: 'idea'

group 'org.diag.uniroma1'
version '0.0.1'

repositories {
    mavenCentral()
        maven {
        url "https://jitpack.io"
    }
    flatDir {
        dirs '../third_party'
    }
}

java {
    sourceCompatibility(JavaVersion.VERSION_1_8)
    targetCompatibility(JavaVersion.VERSION_1_8)
}

application {
    getMainClass().set('trace-alignment.App')
}

dependencies {
    implementation project(':lib')

    // CLI
    implementation 'info.picocli:picocli:4.6.1'
    implementation 'commons-io:commons-io:2.8.0'

    // Logging
    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.14.1'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.14.1'

    // Testing
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine'
}

test {
    useJUnitPlatform()
    testLogging {
        events 'PASSED', 'FAILED', 'SKIPPED'
    }
    afterSuite { desc, result ->
        if (!desc.parent) {
            println "\nTest result: ${result.resultType}"
            println "Test summary: ${result.testCount} tests, " +
                    "${result.successfulTestCount} succeeded, " +
                    "${result.failedTestCount} failed, " +
                    "${result.skippedTestCount} skipped"
        }
    }
}

jar {
    doFirst {
        manifest {
            if (!configurations.runtimeClasspath.isEmpty()) {
                attributes(
                        'Class-Path': configurations.runtimeClasspath.collect{it.toURI().toString()}.join(' '),
                        'Main-Class': 'trace_alignment.App')
            }
        }
    }
    dependsOn configurations.runtimeClasspath
    from {
        configurations.runtimeClasspath.findAll {it.isDirectory() ? it : zipTree(it) }
    }
}
